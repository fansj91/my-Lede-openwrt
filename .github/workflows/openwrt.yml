# 完整OpenWrt构建工作流程（适配17.config）
name: OpenWrt_Custom_Builder

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: '指定配置文件（默认17.config）'
        required: false
        default: '17.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: ${{ github.event.inputs.config_file || '17.config' }}  # 支持手动触发时指定配置文件
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 📦 代码检出
      uses: actions/checkout@v3

    - name: 🛠️ 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理系统空间
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        # 安装依赖包
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y --no-install-recommends \
          build-essential ccache ecj fastjar file gawk gettext git java-propose-classpath libelf-dev \
          libncurses5-dev libncursesw5-dev libssl-dev python3 python3-distutils rsync unzip wget \
          python3-setuptools python3-dev python3-pip python3-venv
        
        # 清理缓存
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /var/lib/apt/lists/*

    - name: 📂 克隆源码
      working-directory: /workdir
      run: |
        echo "🔍 当前工作目录: $(pwd)"
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sfT /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        df -hT $PWD

    - name: 🔧 加载自定义配置
      run: |
        # 配置文件验证
        [ -f "$CONFIG_FILE" ] || { echo "❌ 错误：未找到配置文件 $CONFIG_FILE"; exit 1; }
        
        # 加载配置
        mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 📥 更新Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 📦 安装Feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 🔄 配置验证
      run: |
        cd openwrt
        make defconfig
        grep '^CONFIG_TARGET' .config || { echo "❌ 配置加载失败"; exit 1; }

    - name: ⬇️ 下载依赖包
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: ⚙️ 编译固件
      id: compile
      run: |
        cd openwrt
        echo "💻 使用CPU核心数: $(nproc)"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        
        # 提取设备信息
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        echo "FIRMWARE_NAME=OpenWrt_${{ env.REPO_BRANCH }}_$(cat DEVICE_NAME)_$(date +"%Y%m%d")" >> $GITHUB_ENV

    - name: 🧹 空间清理
      if: always()
      run: |
        echo "🗑️ 剩余空间:"
        df -hT /

    - name: 📦 整理固件
      if: env.UPLOAD_FIRMWARE == 'true' && success()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE_PATH=$(pwd)" >> $GITHUB_ENV

    - name: 🚀 上传固件
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: ${{ env.FIRMWARE_NAME }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: 🗑️ 清理旧构建
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        expire-in: 7days

  post-run:
    runs-on: ubuntu-22.04
    if: always()
    needs: build
    steps:
    - name: 📢 构建状态通知
      uses: ravsamhq/notify-slack-action@v2
      if: always()
      with:
        status: ${{ needs.build.result }}
        notify_when: "failure"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
