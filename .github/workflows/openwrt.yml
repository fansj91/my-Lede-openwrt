# 完整OpenWrt构建工作流程（适配17.config）
name: OpenWrt_LEDE_Builder

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: '指定配置文件（默认17.config）'
        required: false
        default: '17.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: ${{ github.event.inputs.config_file || '17.config' }}  # 支持手动触发时指定配置文件
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 📦 代码检出
      uses: actions/checkout@v3

    - name: 🛠️ 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 使用并行下载加速依赖安装
        echo 'Acquire::ParallelDownloads 10;' | sudo tee /etc/apt/apt.conf.d/99parallel
        # 清理系统空间
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        # 安装依赖包
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y --no-install-recommends \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison \
          build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler \
          flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf \
          haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full \
          patch pkgconf python3 python3-pyelftools python3-setuptools \
          qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        # 配置ccache
        echo 'max_size = 5.0G' | sudo tee -a /etc/ccache.conf
        export PATH="/usr/lib/ccache:$PATH"
        echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
        
        # 清理缓存
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /var/lib/apt/lists/*
        
    - name: 💾 缓存编译依赖
      uses: actions/cache@v3
      with:
        path: |
          /openwrt/dl
          ~/.ccache
        key: ${{ runner.os }}-openwrt-${{ hashFiles('openwrt/config.seed') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-

    - name: 📂 克隆源码
      working-directory: ${{ github.workspace }}
      run: |
        echo "🔍 当前工作目录: $(pwd)"
        git clone $REPO_URL -b $REPO_BRANCH openwrt


    - name: 🔧 加载自定义配置
      run: |
        # 配置文件验证
        [ -f "$CONFIG_FILE" ] || { echo "❌ 错误：未找到配置文件 $CONFIG_FILE"; exit 1; }
        
        # 加载配置
        cd openwrt
        cp $GITHUB_WORKSPACE/$CONFIG_FILE .config
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 📥 更新Feeds
      run: |
        cd openwrt || { echo "❌ 进入源码目录失败"; exit 1; }
        ./scripts/feeds update -a || { echo "❌ 更新feeds失败"; exit 1; }

    - name: 📦 安装Feeds
      run: |
        cd openwrt || { echo "❌ 进入源码目录失败"; exit 1; }
        ./scripts/feeds install -a || { echo "❌ 安装feeds失败"; exit 1; }

    - name: 🔄 配置验证
      run: |
        cd openwrt
        make defconfig
        grep '^CONFIG_TARGET' .config || { echo "❌ 配置加载失败"; exit 1; }

    - name: ⬇️ 下载依赖包
      run: |
        cd openwrt
        echo "开始下载依赖包..."
        if ! make download -j8; then
          echo "并行下载失败，尝试单线程下载..."
          make download -j1 V=s
          if [ $? -ne 0 ]; then
            echo "❌ 依赖下载失败"
            # 列出未下载的文件
            find dl -size -1024c -exec ls -la {} \;
            exit 1
          fi
        fi
        # 清理不完整的下载文件
        find dl -size -1024c -exec rm -f {} \;
        echo "✅ 依赖包下载完成"

    - name: ⚙️ 编译固件
      id: compile
      run: |
        cd openwrt
        echo "💻 使用CPU核心数: $(nproc)"

        # 启用ccache
        export USE_CCACHE=1
        export CCACHE_DIR=~/.ccache
        ccache -z
        
        # 尝试并行编译，失败则单线程重试
        echo "开始编译固件..."
        if make -j$(nproc); then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "并行编译失败，尝试单线程编译..."
          make -j1 V=s  # 单线程编译以获取完整错误信息
          exit 1
        fi
        
        # 提取设备信息
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        DEVICE=$(cat DEVICE_NAME)
        DATE=$(date +"%Y%m%d")
        echo "FIRMWARE_NAME=OpenWrt_${{ env.REPO_BRANCH }}_${DEVICE}_$(date +"%Y%m%d")" >> $GITHUB_ENV
        # echo "TAG_NAME=v$(date +"%Y%m%d")-$(cat DEVICE_NAME)" >> $GITHUB_ENV
        # echo "TAG_NAME=v${DATE}" >> $GITHUB_ENV  # 标签格式：v20250427
        echo "✅ 固件编译完成"
        
    - name: 🧹 空间清理
      if: always()
      run: |
        echo "🗑️ 剩余空间:"
        df -hT /

    - name: 📦 整理固件
      if: env.UPLOAD_FIRMWARE == 'true' && success()
      run: |
        # 动态定位固件目录
        echo "定位固件目录..."
        # 智能文件检测模式
        FIRMWARE_DIR=$(find openwrt/bin/targets/ -type f \( -name "*.bin" -o -name "*.img" \) -exec dirname {} \; | uniq | head -n 1)
        
        # 回退机制
        if [ -z "$FIRMWARE_DIR" ]; then
          FIRMWARE_DIR=$(find openwrt/bin/targets/ -type d -name 'images' 2>/dev/null | head -n 1)
          [ -z "$FIRMWARE_DIR" ] && FIRMWARE_DIR=$(find openwrt/bin/targets/ -type d -name 'files' 2>/dev/null | head -n 1)
        fi
        
        # 最终验证
        if [ -z "$FIRMWARE_DIR" ]; then
          echo "❌ 未找到固件目录"
          find openwrt/bin/targets/ -type d -exec sh -c 'echo -n "{}: "; find "$1" -maxdepth 1 -name "*.bin" -o -name "*.img" | wc -l' _ {} \;
          exit 1
        fi
        
        # 安全路径处理
        cd "${FIRMWARE_DIR%/}" || { 
          echo "❌ 路径验证失败"
          echo "📂 原始路径: $FIRMWARE_DIR"
          echo "🔠 编码转换: $(echo "$FIRMWARE_DIR" | xxd)"
          exit 1 
        }
        
        rm -rf packages
        echo "FIRMWARE_PATH=$(pwd)" >> $GITHUB_ENV
        echo "✅ 固件目录定位完成: $FIRMWARE_DIR"
        
    - name: 🏷️ 创建Git标签
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ env.TAG_NAME }}
        git push origin ${{ env.TAG_NAME }}

    - name: 生成标签
      id: tag_version
      run: |
        echo "tag_name=OpenWrt-${{ env.FIRMWARE_NAME }}" >> $GITHUB_OUTPUT
        
    - name: 🚀 上传固件
      uses: softprops/action-gh-release@master
      if: success()
      with:
        name: ${{ env.FIRMWARE_NAME }}
        tag: ${{ steps.tag_version.outputs.tag_name }}  # 关键参数
        # tag_name: ${{ env.TAG_NAME }}
        files: ${{ env.FIRMWARE_PATH }}/*
        draft: false
        prerelease: false

    - name: 🗑️ 清理旧构建
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        expire-in: 7days

